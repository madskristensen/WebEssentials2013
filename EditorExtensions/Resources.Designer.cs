//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MadsKristensen.EditorExtensions {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MadsKristensen.EditorExtensions.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browser compatibility: Add missing standard directive ({0}).
        /// </summary>
        internal static string BestPracticeAddMissingStandardDirective {
            get {
                return ResourceManager.GetString("BestPracticeAddMissingStandardDirective", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browser compatibility: Add missing standard property ({0}).
        /// </summary>
        internal static string BestPracticeAddMissingStandardProperty {
            get {
                return ResourceManager.GetString("BestPracticeAddMissingStandardProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browser compatibility: Add missing vendor specific properties to &apos;{0}&apos; ({1}).
        /// </summary>
        internal static string BestPracticeAddMissingVendorSpecific {
            get {
                return ResourceManager.GetString("BestPracticeAddMissingVendorSpecific", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browser compatibility: Add missing vendor specific directives to &apos;{0}&apos; ({1}).
        /// </summary>
        internal static string BestPracticeAddMissingVendorSpecificDirective {
            get {
                return ResourceManager.GetString("BestPracticeAddMissingVendorSpecificDirective", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Best practice: The property &apos;{0}&apos; is already specified in the rule. Remove any unneeded duplicates.
        /// </summary>
        internal static string BestPracticeDuplicatePropertyInRule {
            get {
                return ResourceManager.GetString("BestPracticeDuplicatePropertyInRule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Best practice: The property &apos;{0}&apos; with the same value is already specified in the rule and should be removed.
        /// </summary>
        internal static string BestPracticeDuplicatePropertyWithSameValueInRule {
            get {
                return ResourceManager.GetString("BestPracticeDuplicatePropertyWithSameValueInRule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Best practice: The exact same selector is already defined on line {0}. Consider consolidating the duplicate style rules.
        /// </summary>
        internal static string BestPracticeDuplicateSelectors {
            get {
                return ResourceManager.GetString("BestPracticeDuplicateSelectors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Best practice: The &apos;{0}&apos; property has no effect with &apos;display: inline&apos; and should be removed.
        /// </summary>
        internal static string BestPracticeInlineIncompat {
            get {
                return ResourceManager.GetString("BestPracticeInlineIncompat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Best practice: &quot;{0}&quot; should be placed before any pseudo classes/elements.
        /// </summary>
        internal static string BestPracticePseudosAfterOtherSelectors {
            get {
                return ResourceManager.GetString("BestPracticePseudosAfterOtherSelectors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browser compatibility: &quot;{0}&quot; has been deprecated and is no longer needed. {1}.
        /// </summary>
        internal static string BestPracticeRemoveObsolete {
            get {
                return ResourceManager.GetString("BestPracticeRemoveObsolete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browser compatibility: Place the standard property below its vendor specific implementations.
        /// </summary>
        internal static string BestPracticeStandardPropertyOrder {
            get {
                return ResourceManager.GetString("BestPracticeStandardPropertyOrder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Best practice: Don&apos;t specify the unit type ({0}) when the value is zero. (Disable this check in Tools -&gt; Options).
        /// </summary>
        internal static string BestPracticeZeroUnit {
            get {
                return ResourceManager.GetString("BestPracticeZeroUnit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make visible to IE6 only.
        /// </summary>
        internal static string IE6OnlyPropertyHackName {
            get {
                return ResourceManager.GetString("IE6OnlyPropertyHackName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make visible to IE6 only.
        /// </summary>
        internal static string IE6OnlySelectorHackSmartTagActionName {
            get {
                return ResourceManager.GetString("IE6OnlySelectorHackSmartTagActionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make visible to IE7 and above.
        /// </summary>
        internal static string IE7AboveSelectorHackSmartTagActionName {
            get {
                return ResourceManager.GetString("IE7AboveSelectorHackSmartTagActionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make visible to IE7 and below.
        /// </summary>
        internal static string IE7BelowPropertyHackName {
            get {
                return ResourceManager.GetString("IE7BelowPropertyHackName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make visible to IE7 only.
        /// </summary>
        internal static string IE7OnlySelectorHackSmartTagActionName {
            get {
                return ResourceManager.GetString("IE7OnlySelectorHackSmartTagActionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make visible to IE8 and above.
        /// </summary>
        internal static string IE8AboveSelectorHackSmartTagActionName {
            get {
                return ResourceManager.GetString("IE8AboveSelectorHackSmartTagActionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;@import-once&quot; directive was removed in LESS 1.4.  Use &quot;@import&quot;instead..
        /// </summary>
        internal static string LessImportOnceDeprecated {
            get {
                return ResourceManager.GetString("LessImportOnceDeprecated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performance: Never use the universal selector. It has a big negative performance impact on browser rendering..
        /// </summary>
        internal static string PerformanceDontUseStarSelector {
            get {
                return ResourceManager.GetString("PerformanceDontUseStarSelector", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performance: The image is only {0} bytes and should be embedded as a base64 dataURI to reduce the number of HTTP requests..
        /// </summary>
        internal static string PerformanceEmbedImageAsDataUri {
            get {
                return ResourceManager.GetString("PerformanceEmbedImageAsDataUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performance: Use shorthand notation. The properties {0} can be replaced by {1}.
        /// </summary>
        internal static string PerformanceUseShorthand {
            get {
                return ResourceManager.GetString("PerformanceUseShorthand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove IE selector hack.
        /// </summary>
        internal static string RemoveSelectorHackSmartTagActionName {
            get {
                return ResourceManager.GetString("RemoveSelectorHackSmartTagActionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove unused rule.
        /// </summary>
        internal static string RemoveUnusedCssRuleSmartTagActionName {
            get {
                return ResourceManager.GetString("RemoveUnusedCssRuleSmartTagActionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save to file.
        /// </summary>
        internal static string ReverseEmbedSmartTagActionName {
            get {
                return ResourceManager.GetString("ReverseEmbedSmartTagActionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add missing standard property ({0}).
        /// </summary>
        internal static string StandardSmartTagActionName {
            get {
                return ResourceManager.GetString("StandardSmartTagActionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Re-embed dataUri from &quot;{0}&quot;.
        /// </summary>
        internal static string UpdateEmbedSmartTagActionName {
            get {
                return ResourceManager.GetString("UpdateEmbedSmartTagActionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Embed as base64 dataUri.
        /// </summary>
        internal static string UrlSmartTagActionName {
            get {
                return ResourceManager.GetString("UrlSmartTagActionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validation (WE): Values must be between 0 and 255.
        /// </summary>
        internal static string ValidationColorValuesInRange {
            get {
                return ResourceManager.GetString("ValidationColorValuesInRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validation (WE): &quot;{0}&quot; has been deprecated and is safe to remove. Use the un-prefixed standard property instead..
        /// </summary>
        internal static string ValidationDeprecatedVendorDeclaration {
            get {
                return ResourceManager.GetString("ValidationDeprecatedVendorDeclaration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validation (WE): Pseudo elements (&quot;{0}&quot;) must be specified after pseudo classes (&quot;{1}&quot;)..
        /// </summary>
        internal static string ValidationPseudoOrder {
            get {
                return ResourceManager.GetString("ValidationPseudoOrder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validation (WE): &quot;{0}&quot; is not a valid vendor specific property..
        /// </summary>
        internal static string ValidationVendorDeclarations {
            get {
                return ResourceManager.GetString("ValidationVendorDeclarations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validation (WE): &quot;{0}&quot; is not a valid vendor specific @-directive..
        /// </summary>
        internal static string ValidationVendorDirective {
            get {
                return ResourceManager.GetString("ValidationVendorDirective", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validation (WE): &quot;{0}&quot; is not a valid vendor specific pseudo class/element..
        /// </summary>
        internal static string ValidationVendorPseudo {
            get {
                return ResourceManager.GetString("ValidationVendorPseudo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Move property below last vendor specific.
        /// </summary>
        internal static string VendorOrderSmartTagActionName {
            get {
                return ResourceManager.GetString("VendorOrderSmartTagActionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add missing vendor specifics.
        /// </summary>
        internal static string VendorSmartTagActionName {
            get {
                return ResourceManager.GetString("VendorSmartTagActionName", resourceCulture);
            }
        }
    }
}
